export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Custom Quote Sync Metadata-driven Quote-Opportunity custom field synchronization (based on Salesforce Labs Custom Quote Sync ) Changelog ToDo items Look at the permission set granted - you'll probably want to fix that Update API version to the latest and greatest General Description This app allows you to configure custom fields mapping between Opportunity and Quote, and custom fields on OpportunityLineItem and QuoteLineItem. The mapped fields will be synchronized automatically similar to the standard Quote Sync process. Configuration What's Included This package comes with some code(and installs a base trigger handler package) to sync custom fields between Opportunities and Quotes(and their Line Items), but it needs to know which fields to map between the proper objects. This is achieved via Custom Metadata Types. Indicate the Opportunity and Quote(or Line Item) field names on the correct CMT and the package will do the rest."
    },
    {
        "title": "QuoteSyncTestSuite",
        "fileName": "QuoteSyncTestSuite.html",
        "text": "QuoteSyncTestSuite Signature @isTest private class QuoteSyncTestSuite QuoteSyncTestSuite Properties Name Signature acc private static Account acc pb private static Pricebook2 pb pbe private static PricebookEntry pbe prod private static Product2 prod QuoteSyncTestSuite Methods assertOppFields(oppId, expectedOpp) assertOppLineFields(oppId, oppLines) assertQuoteFields(quoteId, expectedQuote) assertQuoteLineFields(quoteId, quoteLines) assertQuoteLineNotSync(oppId, quoteId) assertQuoteLineNotSync(oppId, quoteId, isCreate) assertQuoteLineSync(oppId, quoteId) assertQuoteLineSync(oppId, quoteId, sync, isCreate) assertQuoteNotSync(oppId, quoteId, isCreate) assertQuoteNotSync(oppId, quoteId) assertQuoteSync(oppId, quoteId) assertQuoteSync(oppId, quoteId, sync, isCreate) createOpp() createOpp(setNullOrFalse) createOppLines(opp, num) createOppLines(opp, num, unique, setNullOrFalse) createOppLinesNoSync(opp, num) createQuote(opp) createQuote(opp, setNullOrFalse) createQuoteLines(quote, num) createQuoteLines(quote, num, unique, setNullOrFalse) createQuoteLinesNoSync(quote, num) populateField(sobj, entity, field) populateFields(sobj, entity, fields) populateFields(sobj, entity, fields, setNullOrFalse) populateFields(sobj, entity, fields, setNullOrFalse) printOpp(oppId) printOppLines(oppId) printQuote(quoteId) printQuoteLines(quoteId) startSync(oppId, quoteId) stopSync(oppId) testCreateDuplicateOppLine() Create duplicate opp line with from same pricebookentry testCreateDuplicateQuoteLine() Create duplicate quote line with from same pricebookentry testCreateQuote() Create quote from opp. Verify quote sync fields are copied from opp testCreateQuoteWithQuoteLine() Create quote from opp with opp line. Verify quote line sync fields are copied from opp line testInsertOppLineNoSync() Insert opp line without sync fields.  Verify fields on quote line are sync'ed. testInsertOppLineNotSync() Insert opp line when opp not sync with quote. testInsertOppLineSync() Insert opp line with sync fields set.  Verify corresponding fields on quote line are sync'ed. testInsertQuoteLineNoSync() Insert quote line without sync fields.  Verify corresponding fields on opp line are not sync'ed. testInsertQuoteLineNotSync() Insert quote line when quote not sync with opp. testInsertQuoteLineSync() Insert quote line with sync fields.  Verify corresponding fields on opp line are sync'ed. testStartSyncInsertOppLine() Start sync from quote with quote lines create new opp lines on opp.  Verify opp line fields are sync'ed testStartSyncInsertOppLineSetNull() Start sync from quote with quote lines create new opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_1() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_1a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_2() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_2a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_3() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_3a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_4() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_4a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_5() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_6() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_7() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncMatchOppLine_7a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncOtherQuote() Start sync from another quote. Verify opp and opp line fields are sync'ed from new quote and quote line testStartSyncQuote() Start sync from quote. Verify opp fields are sync'ed from quote testStartSyncQuoteSetNull() Start sync from quote. Verify opp fields are sync'ed from quote testStartSyncUpdateOppLine() Start sync from quote with quote lines update existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncUpdateOppLineSetNull() Start sync from quote with quote lines update existing opp lines on opp.  Verify opp line fields are sync'ed testStartSyncWithQuoteLine() Start sync from quote with quote line. Verify opp line fields are sync'ed from quote line testStartSyncWithQuoteLineSetNull() Start sync from quote with quote line. Verify opp line fields are sync'ed from quote line testStopSync() Stop sync on verify no changes on opp & opp line, quote & quote line fields testUpdateDuplicateOppLine() Update duplicate opp line with from same pricebookentry testUpdateDuplicateQuoteLine() Update duplicate quote line with from same pricebookentry testUpdateOppLineNoSync() Update opp line non-sync fields.  Verify fields on quote line are not updated. testUpdateOppLineNotSync() Update opp line when opp not sync with quote. testUpdateOppLineSync_1() Update opp line sync fields.  Verify corresponding fields on quote line are updated. testUpdateOppLineSync_2() Update opp line sync fields.  Verify corresponding fields on quote line are updated. testUpdateOppLineSync_3() Update opp line sync fields.  Verify corresponding fields on quote line are updated. testUpdateOppLineSyncSetNull() Update opp line sync fields.  Verify corresponding fields on quote line are updated. testUpdateOppNoSync() Update opp non-sync fields.  Verify fields on quote are not updated. testUpdateOppNotSync() Update opp when it's not sync with quote. testUpdateOppSync() Update opp sync fields.  Verify corresponding fields on quote are updated. testUpdateOppSyncSetNull() Update opp sync fields.  Verify corresponding fields on quote are updated. testUpdateQuoteLineNoSync() Update quote line non-sync fields.  Verify corresponding fields on opp line are not updated. testUpdateQuoteLineNotSync() Update quote line when quote not sync with opp. testUpdateQuoteLineSync_1() Update quote line sync fields.  Verify corresponding fields on opp line are updated. testUpdateQuoteLineSync_2() Update quote line sync fields.  Verify corresponding fields on opp line are updated. testUpdateQuoteLineSync_3() Update quote line sync fields.  Verify corresponding fields on opp line are updated. testUpdateQuoteLineSyncSetNull() Update quote line sync fields.  Verify corresponding fields on opp line are updated. testUpdateQuoteNoSync() Update quote non-sync fields.  Verify corresponding fields on opp are not updated. testUpdateQuoteNotSync() Update quote when it's not sync with opp. testUpdateQuoteSync() Update quote sync fields.  Verify corresponding fields on opp are updated. testUpdateQuoteSyncSetNull() Update quote sync fields.  Verify corresponding fields on opp are updated. updateOpp(oppId) updateOpp(oppId, updateNullOrFalse) updateOppLines(oppId) updateOppLines(oppId, stdSyncField, customSyncField) updateOppLines(oppId, stdSyncField, customSyncField, updateNullOrFalse) updateOppLinesCustomSyncFields(oppId) updateOppLinesNoSync(oppId, field) updateOppLinesStdSyncFields(oppId) updateOppNoSync(oppId) updateQuote(quoteId) updateQuote(quoteId, updateNullOrFalse) updateQuoteLines(quoteId) updateQuoteLines(quoteId, stdSyncField, customSyncField) updateQuoteLines(quoteId, stdSyncField, customSyncField, updateNullOrFalse) updateQuoteLinesCustomSyncFields(quoteId) updateQuoteLinesNoSync(quoteId, field) updateQuoteLinesStdSyncFields(quoteId) updateQuoteNoSync(quoteId) assertOppFields(oppId, expectedOpp) Signature private static void assertOppFields(String oppId, Opportunity expectedOpp) assertOppLineFields(oppId, oppLines) Signature private static void assertOppLineFields(String oppId, List<OpportunityLineItem> oppLines) assertQuoteFields(quoteId, expectedQuote) Signature private static void assertQuoteFields(String quoteId, Quote expectedQuote) assertQuoteLineFields(quoteId, quoteLines) Signature private static void assertQuoteLineFields(String quoteId, List<QuoteLineItem> quoteLines) assertQuoteLineNotSync(oppId, quoteId) Signature private static void assertQuoteLineNotSync(String oppId, String quoteId) assertQuoteLineNotSync(oppId, quoteId, isCreate) Signature private static void assertQuoteLineNotSync(String oppId, String quoteId, boolean isCreate) assertQuoteLineSync(oppId, quoteId) Signature private static void assertQuoteLineSync(String oppId, String quoteId) assertQuoteLineSync(oppId, quoteId, sync, isCreate) Signature private static void assertQuoteLineSync(String oppId, String quoteId, boolean sync, boolean isCreate) assertQuoteNotSync(oppId, quoteId, isCreate) Signature private static void assertQuoteNotSync(String oppId, String quoteId, boolean isCreate) assertQuoteNotSync(oppId, quoteId) Signature private static void assertQuoteNotSync(String oppId, String quoteId) assertQuoteSync(oppId, quoteId) Signature private static void assertQuoteSync(String oppId, String quoteId) assertQuoteSync(oppId, quoteId, sync, isCreate) Signature private static void assertQuoteSync(String oppId, String quoteId, boolean sync, boolean isCreate) createOpp() Signature private static Opportunity createOpp() createOpp(setNullOrFalse) Signature private static Opportunity createOpp(boolean setNullOrFalse) createOppLines(opp, num) Signature private static List<OpportunityLineItem> createOppLines(Opportunity opp, Integer num) createOppLines(opp, num, unique, setNullOrFalse) Signature private static List<OpportunityLineItem> createOppLines(Opportunity opp, Integer num, boolean unique, boolean setNullOrFalse) createOppLinesNoSync(opp, num) Signature private static List<OpportunityLineItem> createOppLinesNoSync(Opportunity opp, Integer num) createQuote(opp) Signature private static Quote createQuote(Opportunity opp) createQuote(opp, setNullOrFalse) Signature private static Quote createQuote(Opportunity opp, boolean setNullOrFalse) createQuoteLines(quote, num) Signature private static List<QuoteLineItem> createQuoteLines(Quote quote, Integer num) createQuoteLines(quote, num, unique, setNullOrFalse) Signature private static List<QuoteLineItem> createQuoteLines(Quote quote, Integer num, boolean unique, boolean setNullOrFalse) createQuoteLinesNoSync(quote, num) Signature private static List<QuoteLineItem> createQuoteLinesNoSync(Quote quote, Integer num) populateField(sobj, entity, field) Signature private static void populateField(SObject sobj, String entity, String field) populateFields(sobj, entity, fields) Signature private static void populateFields(SObject sobj, String entity, List<String> fields) populateFields(sobj, entity, fields, setNullOrFalse) Signature private static void populateFields(SObject sobj, String entity, Set<String> fields, boolean setNullOrFalse) populateFields(sobj, entity, fields, setNullOrFalse) Signature private static void populateFields(SObject sobj, String entity, List<String> fields, boolean setNullOrFalse) printOpp(oppId) Signature private static void printOpp(String oppId) printOppLines(oppId) Signature private static void printOppLines(String oppId) printQuote(quoteId) Signature private static void printQuote(String quoteId) printQuoteLines(quoteId) Signature private static void printQuoteLines(String quoteId) startSync(oppId, quoteId) Signature private static void startSync(String oppId, String quoteId) stopSync(oppId) Signature private static void stopSync(String oppId) testCreateDuplicateOppLine() Create duplicate opp line with from same pricebookentry Signature @isTest private static void testCreateDuplicateOppLine() testCreateDuplicateQuoteLine() Create duplicate quote line with from same pricebookentry Signature @isTest private static void testCreateDuplicateQuoteLine() testCreateQuote() Create quote from opp. Verify quote sync fields are copied from opp Signature @isTest private static void testCreateQuote() testCreateQuoteWithQuoteLine() Create quote from opp with opp line. Verify quote line sync fields are copied from opp line Signature @isTest private static void testCreateQuoteWithQuoteLine() testInsertOppLineNoSync() Insert opp line without sync fields.  Verify fields on quote line are sync'ed. Signature @isTest private static void testInsertOppLineNoSync() testInsertOppLineNotSync() Insert opp line when opp not sync with quote. Signature @isTest private static void testInsertOppLineNotSync() testInsertOppLineSync() Insert opp line with sync fields set.  Verify corresponding fields on quote line are sync'ed. Signature @isTest private static void testInsertOppLineSync() testInsertQuoteLineNoSync() Insert quote line without sync fields.  Verify corresponding fields on opp line are not sync'ed. Signature @isTest private static void testInsertQuoteLineNoSync() testInsertQuoteLineNotSync() Insert quote line when quote not sync with opp. Signature @isTest private static void testInsertQuoteLineNotSync() testInsertQuoteLineSync() Insert quote line with sync fields.  Verify corresponding fields on opp line are sync'ed. Signature @isTest private static void testInsertQuoteLineSync() testStartSyncInsertOppLine() Start sync from quote with quote lines create new opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncInsertOppLine() testStartSyncInsertOppLineSetNull() Start sync from quote with quote lines create new opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncInsertOppLineSetNull() testStartSyncMatchOppLine_1() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_1() testStartSyncMatchOppLine_1a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_1a() testStartSyncMatchOppLine_2() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_2() testStartSyncMatchOppLine_2a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_2a() testStartSyncMatchOppLine_3() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_3() testStartSyncMatchOppLine_3a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_3a() testStartSyncMatchOppLine_4() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_4() testStartSyncMatchOppLine_4a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_4a() testStartSyncMatchOppLine_5() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_5() testStartSyncMatchOppLine_6() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_6() testStartSyncMatchOppLine_7() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_7() testStartSyncMatchOppLine_7a() Start sync from quote with quote lines that match existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncMatchOppLine_7a() testStartSyncOtherQuote() Start sync from another quote. Verify opp and opp line fields are sync'ed from new quote and quote line Signature @isTest private static void testStartSyncOtherQuote() testStartSyncQuote() Start sync from quote. Verify opp fields are sync'ed from quote Signature @isTest private static void testStartSyncQuote() testStartSyncQuoteSetNull() Start sync from quote. Verify opp fields are sync'ed from quote Signature @isTest private static void testStartSyncQuoteSetNull() testStartSyncUpdateOppLine() Start sync from quote with quote lines update existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncUpdateOppLine() testStartSyncUpdateOppLineSetNull() Start sync from quote with quote lines update existing opp lines on opp.  Verify opp line fields are sync'ed Signature @isTest private static void testStartSyncUpdateOppLineSetNull() testStartSyncWithQuoteLine() Start sync from quote with quote line. Verify opp line fields are sync'ed from quote line Signature @isTest private static void testStartSyncWithQuoteLine() testStartSyncWithQuoteLineSetNull() Start sync from quote with quote line. Verify opp line fields are sync'ed from quote line Signature @isTest private static void testStartSyncWithQuoteLineSetNull() testStopSync() Stop sync on verify no changes on opp & opp line, quote & quote line fields Signature @isTest private static void testStopSync() testUpdateDuplicateOppLine() Update duplicate opp line with from same pricebookentry Signature @isTest private static void testUpdateDuplicateOppLine() testUpdateDuplicateQuoteLine() Update duplicate quote line with from same pricebookentry Signature @isTest private static void testUpdateDuplicateQuoteLine() testUpdateOppLineNoSync() Update opp line non-sync fields.  Verify fields on quote line are not updated. Signature @isTest private static void testUpdateOppLineNoSync() testUpdateOppLineNotSync() Update opp line when opp not sync with quote. Signature @isTest private static void testUpdateOppLineNotSync() testUpdateOppLineSync_1() Update opp line sync fields.  Verify corresponding fields on quote line are updated. Signature @isTest private static void testUpdateOppLineSync_1() testUpdateOppLineSync_2() Update opp line sync fields.  Verify corresponding fields on quote line are updated. Signature @isTest private static void testUpdateOppLineSync_2() testUpdateOppLineSync_3() Update opp line sync fields.  Verify corresponding fields on quote line are updated. Signature @isTest private static void testUpdateOppLineSync_3() testUpdateOppLineSyncSetNull() Update opp line sync fields.  Verify corresponding fields on quote line are updated. Signature @isTest private static void testUpdateOppLineSyncSetNull() testUpdateOppNoSync() Update opp non-sync fields.  Verify fields on quote are not updated. Signature @isTest private static void testUpdateOppNoSync() testUpdateOppNotSync() Update opp when it's not sync with quote. Signature @isTest private static void testUpdateOppNotSync() testUpdateOppSync() Update opp sync fields.  Verify corresponding fields on quote are updated. Signature @isTest private static void testUpdateOppSync() testUpdateOppSyncSetNull() Update opp sync fields.  Verify corresponding fields on quote are updated. Signature @isTest private static void testUpdateOppSyncSetNull() testUpdateQuoteLineNoSync() Update quote line non-sync fields.  Verify corresponding fields on opp line are not updated. Signature @isTest private static void testUpdateQuoteLineNoSync() testUpdateQuoteLineNotSync() Update quote line when quote not sync with opp. Signature @isTest private static void testUpdateQuoteLineNotSync() testUpdateQuoteLineSync_1() Update quote line sync fields.  Verify corresponding fields on opp line are updated. Signature @isTest private static void testUpdateQuoteLineSync_1() testUpdateQuoteLineSync_2() Update quote line sync fields.  Verify corresponding fields on opp line are updated. Signature @isTest private static void testUpdateQuoteLineSync_2() testUpdateQuoteLineSync_3() Update quote line sync fields.  Verify corresponding fields on opp line are updated. Signature @isTest private static void testUpdateQuoteLineSync_3() testUpdateQuoteLineSyncSetNull() Update quote line sync fields.  Verify corresponding fields on opp line are updated. Signature @isTest private static void testUpdateQuoteLineSyncSetNull() testUpdateQuoteNoSync() Update quote non-sync fields.  Verify corresponding fields on opp are not updated. Signature @isTest private static void testUpdateQuoteNoSync() testUpdateQuoteNotSync() Update quote when it's not sync with opp. Signature @isTest private static void testUpdateQuoteNotSync() testUpdateQuoteSync() Update quote sync fields.  Verify corresponding fields on opp are updated. Signature @isTest private static void testUpdateQuoteSync() testUpdateQuoteSyncSetNull() Update quote sync fields.  Verify corresponding fields on opp are updated. Signature @isTest private static void testUpdateQuoteSyncSetNull() updateOpp(oppId) Signature private static Opportunity updateOpp(String oppId) updateOpp(oppId, updateNullOrFalse) Signature private static Opportunity updateOpp(String oppId, boolean updateNullOrFalse) updateOppLines(oppId) Signature private static List<OpportunityLineItem> updateOppLines(String oppId) updateOppLines(oppId, stdSyncField, customSyncField) Signature private static List<OpportunityLineItem> updateOppLines(String oppId, boolean stdSyncField, boolean customSyncField) updateOppLines(oppId, stdSyncField, customSyncField, updateNullOrFalse) Signature private static List<OpportunityLineItem> updateOppLines(String oppId, boolean stdSyncField, boolean customSyncField, boolean updateNullOrFalse) updateOppLinesCustomSyncFields(oppId) Signature private static List<OpportunityLineItem> updateOppLinesCustomSyncFields(String oppId) updateOppLinesNoSync(oppId, field) Signature private static List<OpportunityLineItem> updateOppLinesNoSync(String oppId, String field) updateOppLinesStdSyncFields(oppId) Signature private static List<OpportunityLineItem> updateOppLinesStdSyncFields(String oppId) updateOppNoSync(oppId) Signature private static Opportunity updateOppNoSync(String oppId) updateQuote(quoteId) Signature private static Quote updateQuote(String quoteId) updateQuote(quoteId, updateNullOrFalse) Signature private static Quote updateQuote(String quoteId, boolean updateNullOrFalse) updateQuoteLines(quoteId) Signature private static List<QuoteLineItem> updateQuoteLines(String quoteId) updateQuoteLines(quoteId, stdSyncField, customSyncField) Signature private static List<QuoteLineItem> updateQuoteLines(String quoteId, boolean stdSyncField, boolean customSyncField) updateQuoteLines(quoteId, stdSyncField, customSyncField, updateNullOrFalse) Signature private static List<QuoteLineItem> updateQuoteLines(String quoteId, boolean stdSyncField, boolean customSyncField, boolean updateNullOrFalse) updateQuoteLinesCustomSyncFields(quoteId) Signature private static List<QuoteLineItem> updateQuoteLinesCustomSyncFields(String quoteId) updateQuoteLinesNoSync(quoteId, field) Signature private static List<QuoteLineItem> updateQuoteLinesNoSync(String quoteId, String field) updateQuoteLinesStdSyncFields(quoteId) Signature private static List<QuoteLineItem> updateQuoteLinesStdSyncFields(String quoteId) updateQuoteNoSync(quoteId) Signature private static Quote updateQuoteNoSync(String quoteId)"
    },
    {
        "title": "QuoteSyncUtil",
        "fileName": "QuoteSyncUtil.html",
        "text": "QuoteSyncUtil Signature public class QuoteSyncUtil QuoteSyncUtil Properties Name Signature isRunningTest public static boolean isRunningTest newQuoteIds private static Set<Id> newQuoteIds oppFields private static Map<String, SObjectField> oppFields oppLineFields private static Map<String, SObjectField> oppLineFields OppLineRequiredFields public static Map<String, Schema.DescribeFieldResult> OppLineRequiredFields OppRequiredFields public static Map<String, Schema.DescribeFieldResult> OppRequiredFields quoteFieldMap private static Map<String, String> quoteFieldMap quoteFields private static Map<String, SObjectField> quoteFields quoteLineFieldMap private static Map<String, String> quoteLineFieldMap quoteLineFields private static Map<String, SObjectField> quoteLineFields QuoteLineRequiredFields public static Map<String, Schema.DescribeFieldResult> QuoteLineRequiredFields QuoteRequiredFields public static Map<String, Schema.DescribeFieldResult> QuoteRequiredFields QuoteSyncUtil Methods addNewQuoteId(id) addQuoteField(quoteField, oppField) addQuoteLineField(qliField, oliField) clearNewQuoteIds() createValue(sobj, entity, field, result, setNullOrFalse) getCustomRequiredFields(entity) getField(entity, field) getNewQuoteIds() getOppFields() getOppFieldsString() getOppLineFields() getOppLineFieldsString() getQuoteFieldMapTo(quoteField) getQuoteFields() getQuoteFieldsString() getQuoteLineFieldMapTo(quoteLineField) getQuoteLineFields() getQuoteLineFieldsString() isNewQuote(id) populateRequiredFields(sobj) removeAllNewQuoteIds(ids) removeNewQuoteId(id) removeQuoteField(quoteField) removeQuoteLineField(qliField) addNewQuoteId(id) Signature public static void addNewQuoteId(Id id) addQuoteField(quoteField, oppField) Signature public static String addQuoteField(String quoteField, String oppField) addQuoteLineField(qliField, oliField) Signature public static String addQuoteLineField(String qliField, String oliField) clearNewQuoteIds() Signature public static void clearNewQuoteIds() createValue(sobj, entity, field, result, setNullOrFalse) Signature public static Object createValue(SObject sobj, String entity, String field, Schema.DescribeFieldResult result, boolean setNullOrFalse) getCustomRequiredFields(entity) Signature public static Map<String, Schema.DescribeFieldResult> getCustomRequiredFields(String entity) getField(entity, field) Signature public static Schema.DescribeFieldResult getField(String entity, String field) getNewQuoteIds() Signature public static Set<Id> getNewQuoteIds() getOppFields() Signature public static List<String> getOppFields() getOppFieldsString() Signature public static String getOppFieldsString() getOppLineFields() Signature public static List<String> getOppLineFields() getOppLineFieldsString() Signature public static String getOppLineFieldsString() getQuoteFieldMapTo(quoteField) Signature public static String getQuoteFieldMapTo(String quoteField) getQuoteFields() Signature public static Set<String> getQuoteFields() getQuoteFieldsString() Signature public static String getQuoteFieldsString() getQuoteLineFieldMapTo(quoteLineField) Signature public static String getQuoteLineFieldMapTo(String quoteLineField) getQuoteLineFields() Signature public static Set<String> getQuoteLineFields() getQuoteLineFieldsString() Signature public static String getQuoteLineFieldsString() isNewQuote(id) Signature public static Boolean isNewQuote(Id id) populateRequiredFields(sobj) Signature public static void populateRequiredFields(SObject sobj) removeAllNewQuoteIds(ids) Signature public static void removeAllNewQuoteIds(Set<Id> ids) removeNewQuoteId(id) Signature public static void removeNewQuoteId(Id id) removeQuoteField(quoteField) Signature public static String removeQuoteField(String quoteField) removeQuoteLineField(qliField) Signature public static String removeQuoteLineField(String qliField)"
    },
    {
        "title": "TriggerStopper",
        "fileName": "TriggerStopper.html",
        "text": "TriggerStopper Signature public class TriggerStopper TriggerStopper Properties Name Signature stopOpp public static boolean stopOpp stopOppLine public static boolean stopOppLine stopQuote public static boolean stopQuote stopQuoteLine public static boolean stopQuoteLine"
    },
    {
        "title": "TriggerHandler",
        "fileName": "TriggerHandler.html",
        "text": "TriggerHandler Trigger Handler virtual class as base for all trigger handlers Signature public virtual class TriggerHandler See License , GitHub , TriggerHandlerTest Author Kevin OHara Since 2013 Author David Schach Since 2021 2023-02-24 add andFinally method TriggerHandler Properties Name Signature Annotations Description BYPASS_ALL_ALIAS private static final String BYPASS_ALL_ALIAS @TestVisible This is the value that will be in the returned list or set when global bypass is active bypassedHandlers private static Set<String> bypassedHandlers @TestVisible All bypassed handlers ERROR_TRIGGERCONTEXT private static final String ERROR_TRIGGERCONTEXT @TestVisible Error text - assumes English for debug logs globalBypass private static Boolean globalBypass @TestVisible true  if we bypass all triggers without checking the contents of bypassedHandlers handlerName private String handlerName The name of this handler. Set by getHandlerName() isTriggerExecuting private Boolean isTriggerExecuting @TestVisible Is this class executing in trigger context? loopCountMap private static Map<String, LoopCount> loopCountMap @TestVisible Map of handlerName  => times run()  was invoked showDebug private static Boolean showDebug @TestVisible true  if we include a debug statement for trigger entry and exit showLimits private static Boolean showLimits @TestVisible true  if we include a debug statement for limits triggerEvent private System.TriggerOperation triggerEvent @TestVisible The current triggerEvent of the trigger, overridable in tests TriggerHandler Constructors TriggerHandler() Basic constructor. Slower than the other one TriggerHandler(handlerName) Constructor with handler name to improve performance TriggerHandler() Basic constructor. Slower than the other one Signature public TriggerHandler() See TriggerHandler.TriggerHandler Example new AccountSampleTriggerHandler().run(); //(in Trigger Handler) public AccountSampleTriggerHandler) { super('AccountSampleTriggerHandler'); this.newRecords =(List<Account>) Trigger.new; this.oldRecords =(List<Account>) Trigger.old; this.newRecordsMap =(Map<Id, Account>) Trigger.newMap; this.oldRecordsMap =(Map<Id, Account>) Trigger.oldMap; } TriggerHandler(handlerName) Constructor with handler name to improve performance Signature public TriggerHandler(String handlerName) Parameters handlerName Type: String The name of the handler Author David Schach Since 2021 Example new AccountSampleTriggerHandler('AccountSampleTriggerHandler').run(); //(in Trigger Handler) public AccountSampleTriggerHandler('AccountSampleTriggerHandler') { this.newRecords =(List<Account>) Trigger.new; this.oldRecords =(List<Account>) Trigger.old; this.newRecordsMap =(Map<Id, Account>) Trigger.newMap; this.oldRecordsMap =(Map<Id, Account>) Trigger.oldMap; } TriggerHandler Methods afterDelete() Virtual method for the implementing class to override afterInsert() Virtual method for the implementing class to override afterUndelete() Virtual method for the implementing class to override afterUpdate() Virtual method for the implementing class to override andFinally() andFinally  is called in every context, regardless of Trigger context Credit to James Simone for this idea beforeDelete() Virtual method for the implementing class to override beforeInsert() Virtual method for the implementing class to override beforeUpdate() Virtual method for the implementing class to override bypass(handlerName) Bypass by string bypass(handlerType) Bypass by type/class. This is probably best for avoiding typos. bypass(handlerNames) Bypass by list, e.g. TriggerHandler.bypass(listOfHandlerStrings) bypassAll() Bypass all handlers(clear bypassedHandlers to prevent confusion) bypassList() Return a list of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience bypassSet() Return a Set of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience clearAllBypasses() Clear all bypasses - by clearing the global bypass and by clearing the list of bypassed handlers clearBypass(handlerName) Bypass a specific handler by name clearBypass(handlerType) Bypass a specific handler by type clearBypass(handlerNames) Bypass a list of handlers clearBypassList() Clear the entire bypass list, but keep the global bypass flag intact This is useful for resetting the list of handlers to bypass while maintaining global bypassing clearGlobalBypass() Clear only the global bypass flag, leaving the list of bypassed handlers intact This is useful for keeping a base set of bypassed handlers intact for an entire operation clearMaxLoopCount() Removes the limit for the number of times we allow this class to run getHandlerName() Get the name of the current handler. This can be set by using the constructor with the string parameter to improve performance getLoopCount(handlerName) return the current loop count incrementCheckLoopCount() Increment the loop count and check if we exceeded the max loop count. Silently exit if we have exceeded it.(Log to System.debug) isBypassed(handlerName) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed isBypassed(handlerType) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed run() Main method that will be called during execution See the sample trigger for the best way to set up your handler setBypass(handlerName, desiredValue) Set bypass status to a specific value. Eliminates the need to know the current bypass status setMaxLoopCount(max) Limit the number of times this handler can be run before it fails silently setTriggerContext() Base method called by constructor to set the current context setTriggerContext(opType, testMode) Set the current trigger context based on the System.TriggerOperation If we are not in a trigger context, then we set isTriggerExecuting to false showDebug() Called in the trigger to force the class to debug trigger entry and exit with context. showDebug(enabled) Called in the trigger to force the class to debug trigger entry and exit with context. Set to true to show entry and exit. showLimits() Called before the trigger to force the class to debug query limits when it runs showLimits(enabled) Called before the trigger to enable the class to debug(or not) query limits when it runs. Set to true to show limits. validateRun() Make sure this trigger should continue to run Returning false  causes trigger handler to exit afterDelete() Virtual method for the implementing class to override Signature @TestVisible protected virtual void afterDelete() afterInsert() Virtual method for the implementing class to override Signature @TestVisible protected virtual void afterInsert() afterUndelete() Virtual method for the implementing class to override Signature @TestVisible protected virtual void afterUndelete() afterUpdate() Virtual method for the implementing class to override Signature @TestVisible protected virtual void afterUpdate() andFinally() andFinally  is called in every context, regardless of Trigger context Credit to James Simone for this idea Signature @TestVisible protected virtual void andFinally() See {@link [The Joys of Apex](https://www.jamessimone.net/blog/joys-of-apex/lightweight-trigger-handler/)} Author James Simone Since 2022 beforeDelete() Virtual method for the implementing class to override Signature @TestVisible protected virtual void beforeDelete() beforeInsert() Virtual method for the implementing class to override Signature @TestVisible protected virtual void beforeInsert() beforeUpdate() Virtual method for the implementing class to override Signature @TestVisible protected virtual void beforeUpdate() bypass(handlerName) Bypass by string Signature public static void bypass(String handlerName) Parameters handlerName Type: String Name of the handler to be bypassed Example TriggerHandler.bypass('AccountSampleTriggerHandler'); bypass(handlerType) Bypass by type/class. This is probably best for avoiding typos. Signature public static void bypass(Type handlerType) Parameters handlerType Type: Type The Class to be bypassed. Must end with \".class\" Author vr8hub Example TriggerHandler.bypass(AccountTriggerHandler.class); bypass(handlerNames) Bypass by list, e.g. TriggerHandler.bypass(listOfHandlerStrings) Signature public static void bypass(List<String> handlerNames) Parameters handlerNames Type: List<String> List of handlernames bypassAll() Bypass all handlers(clear bypassedHandlers to prevent confusion) Signature public static void bypassAll() Example TriggerHandler.bypassAll(); bypassList() Return a list of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience Signature public static List<String> bypassList() Returns List<String>  List of bypassed handlers Example TriggerHandler.bypassList(); bypassSet() Return a Set of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience Signature public static Set<String> bypassSet() Returns Set<String>  Set of bypassed handlers Author David Schach Since 2022 Example if(TriggerHandler.bypassSet().contains('AccountSampleTriggerHandler'){ // do something } clearAllBypasses() Clear all bypasses - by clearing the global bypass and by clearing the list of bypassed handlers Signature public static void clearAllBypasses() Example TriggerHandler.clearAllBypasses(); clearBypass(handlerName) Bypass a specific handler by name Signature public static void clearBypass(String handlerName) Parameters handlerName Type: String The class name to be bypassed Author vr8hub Example TriggerHandler.clearBypass('AccountSampleTriggerHandler'); clearBypass(handlerType) Bypass a specific handler by type Signature public static void clearBypass(Type handlerType) Parameters handlerType Type: Type The class to be bypassed. Must end with \".class\" Example TriggerHandler.clearBypass(AccountSampleTriggerHandler.class); clearBypass(handlerNames) Bypass a list of handlers Signature public static void clearBypass(List<String> handlerNames) Parameters handlerNames Type: List<String> List of Strings of handlers to bypass Example List<String> classList = ['AccountTriggerHandler','ContactTriggerHandler']; TriggerHandler.clearBypass(classList); clearBypassList() Clear the entire bypass list, but keep the global bypass flag intact This is useful for resetting the list of handlers to bypass while maintaining global bypassing Signature public static void clearBypassList() Example TriggerHandler.clearBypassList(); clearGlobalBypass() Clear only the global bypass flag, leaving the list of bypassed handlers intact This is useful for keeping a base set of bypassed handlers intact for an entire operation Signature public static void clearGlobalBypass() Example TriggerHandler.clearGlobalBypass(); clearMaxLoopCount() Removes the limit for the number of times we allow this class to run Signature public void clearMaxLoopCount() getHandlerName() Get the name of the current handler. This can be set by using the constructor with the string parameter to improve performance Signature @TestVisible private String getHandlerName() Returns String  Name of the current handler See TriggerHandler.handlerName getLoopCount(handlerName) return the current loop count Signature public static Integer getLoopCount(String handlerName) Parameters handlerName Type: String The handler class to check for the current loop count Returns Integer  How many times has this handler run? incrementCheckLoopCount() Increment the loop count and check if we exceeded the max loop count. Silently exit if we have exceeded it.(Log to System.debug) Signature private Boolean incrementCheckLoopCount() Returns Boolean  Should the trigger continue execution? Authors David Schach , fbouzeraa isBypassed(handlerName) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed Signature public static Boolean isBypassed(String handlerName) Parameters handlerName Type: String The class name of the handler we are checking is bypassed Returns Boolean  Is this handler bypassed? Example TriggerHandler.isBypassed('AccountTriggerHandler'); isBypassed(handlerType) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed Signature public static Boolean isBypassed(Type handlerType) Parameters handlerType Type: Type The handler class we are checking is bypassed Returns Boolean  Is this handler bypassed? Since 2021 Example TriggerHandler.isBypassed(AccountTriggerHandler.class); run() Main method that will be called during execution See the sample trigger for the best way to set up your handler Signature public void run() Authors Kevin OHara , David Schach Example new AccountSampleTriggerHandler().run(); setBypass(handlerName, desiredValue) Set bypass status to a specific value. Eliminates the need to know the current bypass status Signature public static void setBypass(String handlerName, Boolean desiredValue) Parameters handlerName Type: String The name of the TriggerHandler class desiredValue Type: Boolean true  to bypass, and false  to run the handler/clear the bypass Since 2021 Author David Schach Example TriggerHandler.setBypass('AccountTriggerHandler', false); -or- Boolean isBypassed = TriggerHandler.isBypassed('AccountTriggerHandler'); TriggerHandler.bypass('AccountTriggerHandler'); // do something here TriggerHandler.setBypass('AccountTriggerHandler', isBypassed); setMaxLoopCount(max) Limit the number of times this handler can be run before it fails silently Signature public void setMaxLoopCount(Integer max) Parameters max Type: Integer Naximum number of times Author David Schach Example TriggerHandler.setMaxLoopCount(5); setTriggerContext() Base method called by constructor to set the current context Signature @TestVisible private void setTriggerContext() setTriggerContext(opType, testMode) Set the current trigger context based on the System.TriggerOperation If we are not in a trigger context, then we set isTriggerExecuting to false Signature @TestVisible private void setTriggerContext(System.TriggerOperation opType, Boolean testMode) Parameters opType Type: System.TriggerOperation The operation type - set automatically by the system testMode Type: Boolean Only used in test methods to force certain contexts See TriggerHandler.isTriggerExecuting showDebug() Called in the trigger to force the class to debug trigger entry and exit with context. Signature public static void showDebug() See TriggerHandler.showLimits Author David Schach Since 2021 Example TriggerHandler.showDebug(); new AccountSampleTriggerHandler.run(); -or- AccountSampleTriggerHandler.showDebug(); showDebug(enabled) Called in the trigger to force the class to debug trigger entry and exit with context. Set to true to show entry and exit. Signature public static void showDebug(Boolean enabled) Parameters enabled Type: Boolean true to enable; false to disable See TriggerHandler.showDebug Author David Schach Since 2021 showLimits() Called before the trigger to force the class to debug query limits when it runs Signature public static void showLimits() See TriggerHandler.showLimits Example TriggerHandler.showLimits(); new AccountSampleTriggerHandler.run(); -or- AccountSampleTriggerHandler.showLimits(); showLimits(enabled) Called before the trigger to enable the class to debug(or not) query limits when it runs. Set to true to show limits. Signature public static void showLimits(Boolean enabled) Parameters enabled Type: Boolean true to enable; false to disable See TriggerHandler.showLimits validateRun() Make sure this trigger should continue to run Returning false  causes trigger handler to exit Signature @TestVisible private Boolean validateRun() Returns Boolean  Is the run valid? Exceptions TriggerHandlerException See TriggerHandler.TriggerHandlerException TriggerHandler.LoopCount Inner class for managing the loop count per handler Signature @TestVisible private class LoopCount TriggerHandler.LoopCount Properties Name Signature Description count private Integer count Number of times this handler has been run max private Integer max Maximum number of times this handler should be run TriggerHandler.LoopCount Constructors LoopCount() Standard constructor Default max to 5 Default count to 0 LoopCount(max) Constructor with specified max loops LoopCount() Standard constructor Default max to 5 Default count to 0 Signature public LoopCount() LoopCount(max) Constructor with specified max loops Signature public LoopCount(Integer max) Parameters max Type: Integer Max number of loops allowed TriggerHandler.LoopCount Methods exceeded() Determines if we're about to exceed the loop count. getCount() Returns the current loop count. getMax() Returns the max loop count. increment() Increment the internal counter returning the results of this.exceeded(). setMax(max) Sets the max loop count exceeded() Determines if we're about to exceed the loop count. Signature public Boolean exceeded() Returns Boolean  True if less than 0 or more than max. getCount() Returns the current loop count. Signature public Integer getCount() Returns Integer  Current loop count. getMax() Returns the max loop count. Signature public Integer getMax() Returns Integer  Max loop count. increment() Increment the internal counter returning the results of this.exceeded(). Signature public Boolean increment() Returns Boolean  true if count will exceed max count or is less than 0. setMax(max) Sets the max loop count Signature public void setMax(Integer max) Parameters max Type: Integer The integer to set max to. TriggerHandler.TriggerHandlerException Exception class Signature public class TriggerHandlerException extends Exception"
    },
    {
        "title": "TriggerHandlerTest",
        "fileName": "TriggerHandlerTest.html",
        "text": "TriggerHandlerTest Test class for base TriggerHandler class Signature @isTest private class TriggerHandlerTest See GitHub , TriggerHandler Author Kevin OHara Since 2013 Author David Schach Since 2021 Update, add new methods 2023-02-08 Update assert methods to Assert class TriggerHandlerTest Properties Name Signature handler private static TriggerHandlerTest.TestHandler handler lastMethodCalled private static String lastMethodCalled TriggerHandlerTest Methods afterDeleteMode() afterInsertMode() afterUndeleteMode() afterUpdateMode() assertTestHandlerName() Ensure that the current handler name is as expected beforeDeleteMode() beforeInsertMode() beforeUpdateMode() resetTest() testAfterDelete() testAfterInsert() testAfterUndelete() testAfterUpdate() testBeforeDelete() testBeforeInsert() testBeforeInsertWithLimits() Test and show limits and debug testBeforeUpdate() testBypassAPI() test bypass api testBypassByType() Test bypass by Type testConstructorWithParameter() testConstructorWithParametersAndBypass() testLoopCount() instance method tests testLoopCountClass() testNonTriggerContext() testOutsideTrigger() call from outside trigger testVirtualMethods() test virtual methods afterDeleteMode() Signature private static void afterDeleteMode() afterInsertMode() Signature private static void afterInsertMode() afterUndeleteMode() Signature private static void afterUndeleteMode() afterUpdateMode() Signature private static void afterUpdateMode() assertTestHandlerName() Ensure that the current handler name is as expected Signature private static void assertTestHandlerName() beforeDeleteMode() Signature private static void beforeDeleteMode() beforeInsertMode() Signature private static void beforeInsertMode() beforeUpdateMode() Signature private static void beforeUpdateMode() resetTest() Signature private static void resetTest() testAfterDelete() Signature @isTest private static void testAfterDelete() testAfterInsert() Signature @isTest private static void testAfterInsert() testAfterUndelete() Signature @isTest private static void testAfterUndelete() testAfterUpdate() Signature @isTest private static void testAfterUpdate() testBeforeDelete() Signature @isTest private static void testBeforeDelete() testBeforeInsert() Signature @isTest private static void testBeforeInsert() testBeforeInsertWithLimits() Test and show limits and debug Signature @isTest private static void testBeforeInsertWithLimits() testBeforeUpdate() Signature @isTest private static void testBeforeUpdate() testBypassAPI() test bypass api Signature @isTest private static void testBypassAPI() testBypassByType() Test bypass by Type Signature @IsTest static void testBypassByType() testConstructorWithParameter() Signature @isTest private static void testConstructorWithParameter() testConstructorWithParametersAndBypass() Signature @isTest private static void testConstructorWithParametersAndBypass() testLoopCount() instance method tests Signature @isTest private static void testLoopCount() testLoopCountClass() Signature @isTest private static void testLoopCountClass() testNonTriggerContext() Signature @isTest private static void testNonTriggerContext() testOutsideTrigger() call from outside trigger Signature @isTest private static void testOutsideTrigger() testVirtualMethods() test virtual methods Signature @isTest private static void testVirtualMethods() TriggerHandlerTest.TestHandler test implementation of the TriggerHandler Signature private class TestHandler extends TriggerHandler TriggerHandlerTest.TestHandler Constructors TestHandler() Invoke constructor TestHandler(handlerName) Override the trigger handler constructor that takes the handler name as a parameter TestHandler() Invoke constructor Signature public TestHandler() TestHandler(handlerName) Override the trigger handler constructor that takes the handler name as a parameter Signature public TestHandler(String handlerName) Parameters handlerName Type: String The handler name to instantiate TriggerHandlerTest.TestHandler Methods afterDelete() afterInsert() afterUndelete() afterUpdate() beforeDelete() beforeInsert() beforeUpdate() afterDelete() Signature public override void afterDelete() afterInsert() Signature public override void afterInsert() afterUndelete() Signature public override void afterUndelete() afterUpdate() Signature public override void afterUpdate() beforeDelete() Signature public override void beforeDelete() beforeInsert() Signature public override void beforeInsert() beforeUpdate() Signature public override void beforeUpdate()"
    }
];
